// Generated by CoffeeScript 1.6.3
(function() {
  var printMetadata;

  window.encodeCube = function() {
    var data, field, fields, url, urlComp, _i, _len;
    fields = ['front', 'back', 'top', 'bottom', 'right', 'left'];
    data = '';
    for (_i = 0, _len = fields.length; _i < _len; _i++) {
      field = fields[_i];
      data += $('#face_' + field).val();
    }
    urlComp = encodeURIComponent(data);
    url = location.pathname + 'encode?stickers=' + urlComp;
    $.getJSON(url, function(data) {
      $('button').prop('disabled', false);
      if (data.error != null) {
        return alert('Error: ' + data.error);
      }
      $('#input_number').val(data.hash);
      return printMetadata('Encode', data);
    });
    return $('button').prop('disabled', true);
  };

  window.decodeCube = function() {
    var url, urlComp;
    $('button').prop('disabled', true);
    urlComp = encodeURIComponent($('#input_number').val());
    url = location.pathname + 'decode?number=' + urlComp;
    return $.getJSON(url, function(data) {
      var fields, string, x, _i, _len;
      $('button').prop('disabled', false);
      if (data.error != null) {
        return alert('Error: ' + data.error);
      }
      string = data.string;
      fields = ['front', 'back', 'top', 'bottom', 'right', 'left'];
      for (_i = 0, _len = fields.length; _i < _len; _i++) {
        x = fields[_i];
        $('#face_' + x).val(string.slice(0, 9));
        string = string.slice(9);
      }
      return printMetadata('Decode', data);
    });
  };

  printMetadata = function(operation, obj) {
    var preEl, str;
    str = JSON.stringify(obj, null, 2);
    preEl = $('<pre />');
    preEl.text(str);
    $('#metadata').html('<h2>' + operation + ' Metadata</h1>');
    return $('#metadata').append(preEl);
  };

}).call(this);
